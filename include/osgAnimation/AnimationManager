/*  -*-c++-*- 
 *  Copyright (C) 2008 Cedric Pinson <mornifle@plopbyte.net>
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGANIMATION_ANIMATION_MANAGER_H
#define OSGANIMATION_ANIMATION_MANAGER_H

#include <osg/Group>
#include <osgAnimation/Animation>
#include <osgAnimation/Export>
#include <osg/FrameStamp>

namespace osgAnimation
{

    class OSGANIMATION_EXPORT AnimationManager : public osg::Group
    {
    public:

        typedef std::set<osg::ref_ptr<Target> > TargetSet;
        struct UpdateCallback : public osg::NodeCallback
        {
            /** Callback method called by the NodeVisitor when visiting a node.*/
            virtual void operator()(osg::Node* node, osg::NodeVisitor* nv)
            { 
                if (nv && nv->getVisitorType() == osg::NodeVisitor::UPDATE_VISITOR) 
                {
                    AnimationManager* b = dynamic_cast<AnimationManager*>(node);
                    if (b) 
                    {
                        if (b->needToLink())
                        {
                            /** manager need to link, it means that an animation has been added
                                so we need to relink all item animated with all animations.
                                We apply the linker visitor on the manager node to affect
                                all its children.
                                But it should not be done here, it should be done in the
                                update of AnimationManager
                            */
                            b->link();
                        }
                        const osg::FrameStamp* fs = nv->getFrameStamp();
                        b->update(fs->getSimulationTime());
                    }
                }
                traverse(node,nv);
            }
        };

        META_Node(osgAnimation, AnimationManager);
  
        AnimationManager();
        AnimationManager(const AnimationManager& b, const osg::CopyOp& copyop= osg::CopyOp::SHALLOW_COPY) : 
            osg::Group(b,copyop) {}
        virtual ~AnimationManager();

        void update (double time);
        void buildTargetReference();
        void registerAnimation (Animation* pAnimation);
        void playAnimation (Animation* pAnimation, float weight = 1.0);
        bool stopAnimation (Animation* pAnimation);

        bool findAnimation (Animation* pAnimation);
        bool isPlaying (Animation* pAnimation);
        bool isPlaying (const std::string& animationName);
        void link();

        AnimationMap getAnimationMap() const;
        bool needToLink() const;

        void stopAll();
    

    protected:
        AnimationList _listAnimation;
        AnimationList _listAnimPlaying;
        TargetSet _targets;
        bool _needToLink;

        // clock
        double _lastUpdate;
    };

}
#endif
